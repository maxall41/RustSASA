name: Rust
on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88.0
          profile: minimal
          override: true
          components: rustfmt, clippy
      - name: Get submodules
        run: |
          git submodule update --init --recursive
      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88.0
          profile: minimal
          override: true
      - name: Get submodules
        run: |
          git submodule update --init --recursive
      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2
      - name: Run tests
        run: RUSTFLAGS=-Awarnings cargo test --verbose

  build: #TODO: Get PGO to work in CI/CD
    name: Build Binaries
    needs: [quality, test]
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: rust-sasa-linux-x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: rust-sasa-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: rust-sasa-macos-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: rust-sasa-windows-x86_64.exe
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88.0
          target: ${{ matrix.target }}
          override: true
      - name: Get submodules
        run: |
          git submodule update --init --recursive
      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2

      - name: Build release binary
        run: cargo build --verbose --release --target ${{ matrix.target }}

      - name: Copy binary for upload (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/rust-sasa ${{ matrix.name }}
      - name: Copy binary for upload (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          copy target\${{ matrix.target }}\release\rust-sasa.exe ${{ matrix.name }}
        shell: cmd
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Display structure of downloaded files
        run: ls -la ./artifacts/
      - name: Prepare release files
        run: |
          mkdir -p ./release
          find ./artifacts -name "rust-sasa-*" -type f -exec cp {} ./release/ \;
          ls -la ./release/
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./release/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
