name: Rust
on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
permissions:
  contents: write # Required for creating releases
  actions: read
  checks: read
jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88.0
          profile: minimal
          override: true
          components: rustfmt, clippy
      - name: Get submodules
        run: |
          git submodule update --init --recursive
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88.0
          profile: minimal
          override: true
      - name: Get submodules
        run: |
          git submodule update --init --recursive
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-
      - name: Run tests
        run: RUSTFLAGS=-Awarnings cargo test --verbose

  build:
    name: Build PGO optimized binaries
    needs: [quality, test]
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu # CONFIRMED WORKING
            os: ubuntu-latest
            name: x86_64-rust-sasa-linux-gnu
          # - target: x86_64-apple-darwin
          #   os: macos-latest
          #   arch: x86
          #   name: x86_64-rust-sasa-macos
          - target: aarch64-apple-darwin
            os: macos-latest
            name: aarch64-rust-sasa-macos
          - target: x86_64-pc-windows-msvc # CONFIRMED WORKING
            os: windows-latest
            name: rust-sasa-windows-x86_64.exe
          # - target: aarch64-unknown-linux-gnu
          #   os: ubuntu-latest
          #   name: rust-sasa-linux-gnu-aarch64
          # - target: aarch64-pc-windows-msvc
          #   os: windows-latest
          #   name: aarch64-rust-sasa-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88.0
          target: ${{ matrix.target }}
          override: true
          components: llvm-tools-preview

      - name: Get submodules
        run: |
          git submodule update --init --recursive

      - name: Install LLVM and Clang
        if: matrix.os != 'macos-latest'
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "20.1.0"

      - name: Install cargo-pgo
        if: matrix.os == 'windows-latest' || matrix.os == 'ubuntu-latest'
        run: cargo install cargo-pgo

      - name: Build initial binary for PGO
        if: matrix.os == 'windows-latest' || matrix.os == 'ubuntu-latest'
        run: cargo pgo build -- --target ${{ matrix.target }}

      - name: Create temp output directory
        run: mkdir temp_out

      - name: Download AlphaFold dataset
        shell: bash
        run: |
          if [ ! -f UP000000625_83333_ECOLI_v4.tar ]; then
            curl -L -o UP000000625_83333_ECOLI_v4.tar https://f005.backblazeb2.com/file/publicbucket498328942/UP000000625_83333_ECOLI_v4.tar
          fi

      - name: Run PGO profiling (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p UP000000625_83333_ECOLI_v4/
          tar -xf UP000000625_83333_ECOLI_v4.tar -C UP000000625_83333_ECOLI_v4/
          rm -rf UP000000625_83333_ECOLI_v4/*.cif
          gunzip UP000000625_83333_ECOLI_v4/*.gz
          cargo pgo run -- UP000000625_83333_ECOLI_v4/ temp_out/ --format json

      - name: Run PGO profiling (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Find llvm-profdata from the llvm-tools-preview component
          RUST_SYSROOT=$(rustc --print sysroot)
          LLVM_PROFDATA_PATH=$(find "$RUST_SYSROOT" -name llvm-profdata | grep -E "lib/rustlib/[^/]+/bin" | head -1)

          if [ -z "$LLVM_PROFDATA_PATH" ]; then
            echo "Error: Could not find llvm-profdata in Rust toolchain"
            exit 1
          fi

          echo "MacOS: Using llvm-profdata at: $LLVM_PROFDATA_PATH"
          echo "LLVM version: $($LLVM_PROFDATA_PATH --version)"

          mkdir -p UP000000625_83333_ECOLI_v4/
          tar -xf UP000000625_83333_ECOLI_v4.tar -C UP000000625_83333_ECOLI_v4/
          rm -rf UP000000625_83333_ECOLI_v4/*.cif
          gunzip UP000000625_83333_ECOLI_v4/*.gz

          # Build with PGO instrumentation
          RUSTFLAGS="-Cprofile-generate=/tmp/pgo-data" cargo build --release --target ${{ matrix.target }}

          # Run the instrumented binary
          ./target/${{ matrix.target }}/release/rust-sasa UP000000625_83333_ECOLI_v4/ temp_out/ --format json

          echo "Merging profile data"
          $LLVM_PROFDATA_PATH merge -o ./merged.profdata /tmp/pgo-data

      - name: Run PGO profiling (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          mkdir UP000000625_83333_ECOLI_v4/
          tar -xf UP000000625_83333_ECOLI_v4.tar -C UP000000625_83333_ECOLI_v4/
          Remove-Item -Path "UP000000625_83333_ECOLI_v4/*.cif" -Force -ErrorAction SilentlyContinue
          Get-ChildItem -Path "UP000000625_83333_ECOLI_v4" -Filter "*.gz" | ForEach-Object {
              & "C:\Program Files\7-Zip\7z.exe" x $_.FullName -o"$(Split-Path $_.FullName -Parent)" -y | Out-Null
              Remove-Item $_.FullName
          }
          cargo pgo run -- UP000000625_83333_ECOLI_v4/ temp_out/ --format json
      - name: Debug PGO profiles
        shell: bash
        run: |
          echo "Checking for profile files..."
          find target -name "*.profraw" -o -name "*.profdata" 2>/dev/null || echo "No profile files found"
          ls -la target/pgo-profiles/ 2>/dev/null || echo "No pgo-profiles directory"
      - name: Optimize with PGO
        if: matrix.os == 'windows-latest' || matrix.os == 'ubuntu-latest'
        run: |
          cargo pgo optimize build -- --target ${{ matrix.target }}
      - name: Optimize with PGO (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          RUSTFLAGS="-Cprofile-use=./merged.profdata" cargo build --release --target ${{ matrix.target }}
      - name: Copy optimized binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/rust-sasa ${{ matrix.name }}
      - name: Copy optimized binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          copy target\${{ matrix.target }}\release\rust-sasa.exe ${{ matrix.name }}
        shell: cmd
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Display structure of downloaded files
        run: ls -la ./artifacts/
      - name: Prepare release files
        run: |
          mkdir -p ./release
          find ./artifacts -name "rust-sasa-*" -type f -exec cp {} ./release/ \;
          ls -la ./release/
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./release/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
