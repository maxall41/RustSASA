name: Rust
on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

# Add permissions for the workflow
permissions:
  contents: write # Required for creating releases
  actions: read
  checks: read

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88.0
          profile: minimal
          override: true
          components: rustfmt, clippy
      - name: Get submodules
        run: |
          git submodule update --init --recursive
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88.0
          profile: minimal
          override: true
      - name: Get submodules
        run: |
          git submodule update --init --recursive
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-
      - name: Run tests
        run: RUSTFLAGS=-Awarnings cargo test --verbose

  build:
    name: Build PGO optimized binaries
    needs: [quality, test]
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: rust-sasa-linux-x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: rust-sasa-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: rust-sasa-macos-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: rust-sasa-windows-x86_64.exe
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88.0
          target: ${{ matrix.target }}
          override: true
          components: llvm-tools-preview
      - name: Get submodules
        run: |
          git submodule update --init --recursive
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-
      - name: Setup PGO directories and paths
        shell: bash
        run: |
          # Create PGO profile directory
          mkdir -p /tmp/pgo-data

          # Find the correct llvm-profdata from rustup
          RUSTUP_HOME=$(rustup show home)
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            LLVM_PROFDATA_PATH="$RUSTUP_HOME/toolchains/1.88.0-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin/llvm-profdata"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            LLVM_PROFDATA_PATH="$RUSTUP_HOME/toolchains/1.88.0-x86_64-apple-darwin/lib/rustlib/x86_64-apple-darwin/bin/llvm-profdata"
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            LLVM_PROFDATA_PATH="$RUSTUP_HOME/toolchains/1.88.0-x86_64-pc-windows-msvc/lib/rustlib/x86_64-pc-windows-msvc/bin/llvm-profdata.exe"
          fi

          echo "LLVM_PROFDATA_PATH=$LLVM_PROFDATA_PATH" >> $GITHUB_ENV
          echo "PGO_DATA_DIR=/tmp/pgo-data" >> $GITHUB_ENV

          # Verify the tool exists
          if [[ -f "$LLVM_PROFDATA_PATH" ]]; then
            echo "✓ Found llvm-profdata at: $LLVM_PROFDATA_PATH"
          else
            echo "✗ llvm-profdata not found at: $LLVM_PROFDATA_PATH"
            echo "Searching for llvm-profdata..."
            find "$RUSTUP_HOME" -name "llvm-profdata*" -type f 2>/dev/null || echo "No llvm-profdata found"
          fi

      - name: Step 1 - Build instrumented binary
        shell: bash
        run: |
          echo "Building instrumented binary..."
          RUSTFLAGS="-Cprofile-generate=${{ env.PGO_DATA_DIR }}" \
            cargo build --release --target ${{ matrix.target }}

      - name: Create temp output directory
        run: mkdir temp_out

      - name: Cache AlphaFold dataset
        uses: actions/cache@v4
        with:
          path: UP000000625_83333_ECOLI_v4.tar
          key: alphafold-UP000000625_83333_ECOLI_v4-dataset

      - name: Download AlphaFold dataset
        shell: bash
        run: |
          if [ ! -f UP000000625_83333_ECOLI_v4.tar ]; then
            curl -L -o UP000000625_83333_ECOLI_v4.tar https://f005.backblazeb2.com/file/publicbucket498328942/UP000000625_83333_ECOLI_v4.tar
          fi

      - name: Step 2 - Run instrumented binary (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "Preparing test data..."
          mkdir -p UP000000625_83333_ECOLI_v4/
          tar -xf UP000000625_83333_ECOLI_v4.tar -C UP000000625_83333_ECOLI_v4/
          rm -rf UP000000625_83333_ECOLI_v4/*.cif
          gunzip UP000000625_83333_ECOLI_v4/*.gz

          echo "Running instrumented binary..."
          ./target/${{ matrix.target }}/release/rust-sasa UP000000625_83333_ECOLI_v4/ temp_out/ --format json

          echo "Profile files generated:"
          ls -la ${{ env.PGO_DATA_DIR }}/ || echo "No profile files found"

      - name: Step 2 - Run instrumented binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "Preparing test data..."
          mkdir UP000000625_83333_ECOLI_v4/
          tar -xf UP000000625_83333_ECOLI_v4.tar -C UP000000625_83333_ECOLI_v4/
          Remove-Item -Path "UP000000625_83333_ECOLI_v4/*.cif" -Force -ErrorAction SilentlyContinue
          Get-ChildItem -Path "UP000000625_83333_ECOLI_v4" -Filter "*.gz" | ForEach-Object {
              & "C:\Program Files\7-Zip\7z.exe" x $_.FullName -o"$(Split-Path $_.FullName -Parent)" -y | Out-Null
              Remove-Item $_.FullName
          }

          Write-Host "Running instrumented binary..."
          & "target\${{ matrix.target }}\release\rust-sasa.exe" UP000000625_83333_ECOLI_v4/ temp_out/ --format json

          Write-Host "Profile files generated:"
          Get-ChildItem -Path "${{ env.PGO_DATA_DIR }}" -ErrorAction SilentlyContinue

      - name: Step 3 - Merge profile data
        shell: bash
        run: |
          echo "Merging profile data..."

          # Count profile files
          PROFILE_COUNT=$(find ${{ env.PGO_DATA_DIR }} -name "*.profraw" | wc -l)
          echo "Found $PROFILE_COUNT .profraw files"

          if [ $PROFILE_COUNT -eq 0 ]; then
            echo "ERROR: No .profraw files found!"
            exit 1
          fi

          # Merge profiles
          "${{ env.LLVM_PROFDATA_PATH }}" merge -o ${{ env.PGO_DATA_DIR }}/merged.profdata ${{ env.PGO_DATA_DIR }}

          # Verify merged profile
          if [ -f "${{ env.PGO_DATA_DIR }}/merged.profdata" ]; then
            echo "✓ Successfully created merged.profdata"
            ls -la ${{ env.PGO_DATA_DIR }}/merged.profdata
          else
            echo "✗ Failed to create merged.profdata"
            exit 1
          fi

      - name: Step 4 - Build optimized binary
        shell: bash
        run: |
          echo "Building PGO-optimized binary..."
          RUSTFLAGS="-Cprofile-use=${{ env.PGO_DATA_DIR }}/merged.profdata -Cllvm-args=-pgo-warn-missing-function" \
            cargo build --release --target ${{ matrix.target }}

      - name: Copy optimized binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/rust-sasa ${{ matrix.name }}

      - name: Copy optimized binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          copy target\${{ matrix.target }}\release\rust-sasa.exe ${{ matrix.name }}
        shell: cmd

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Display structure of downloaded files
        run: ls -la ./artifacts/
      - name: Prepare release files
        run: |
          mkdir -p ./release
          find ./artifacts -name "rust-sasa-*" -type f -exec cp {} ./release/ \;
          ls -la ./release/
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./release/*
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
