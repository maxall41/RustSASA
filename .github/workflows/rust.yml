name: Rust

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.88.0

      - name: Get submodules
        run: |
          git submodule update --init --recursive

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-

      - name: Run tests
        run: cargo test --verbose

  build:
    name: Build PGO optimized binaries
    needs: [quality, test]
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: rust-sasa-linux-x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: rust-sasa-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: rust-sasa-macos-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: rust-sasa-windows-x86_64.exe
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.88.0
          target: ${{ matrix.target }}
          components: llvm-tools-preview

      - name: Get submodules
        run: |
          git submodule update --init --recursive

      - name: Add Rust tools to path
        run: echo "$(rustc --print sysroot)/lib/rustlib/x86_64-unknown-linux-gnu/bin" >> $GITHUB_PATH
        if: runner.os == 'Linux'

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Install cargo-pgo
        run: cargo install cargo-pgo

      - name: Build initial binary for PGO
        run: cargo pgo build -- --target ${{ matrix.target }}

      - name: Create temp output directory
        run: mkdir temp_out

      - name: Run PGO profiling (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          wget https://ftp.ebi.ac.uk/pub/databases/alphafold/latest/UP000000625_83333_ECOLI_v4.tar
          mkdir UP000000625_83333_ECOLI_v4/
          tar -xf UP000000625_83333_ECOLI_v4.tar -C UP000000625_83333_ECOLI_v4/
          rm -rf  UP000000625_83333_ECOLI_v4/*.cif
          gunzip UP000000625_83333_ECOLI_v4/*.gz
          LLVM_PROFILE_FILE="rust-sasa-%p-%m.profraw" cargo pgo run -- UP000000625_83333_ECOLI_v4/ temp_out/ --format json
        env:
          LLVM_PROFILE_FILE: "rust-sasa-%p-%m.profraw"

      - name: Run PGO profiling (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $env:LLVM_PROFILE_FILE="rust-sasa-%p-%m.profraw"
          wget https://ftp.ebi.ac.uk/pub/databases/alphafold/latest/UP000000625_83333_ECOLI_v4.tar
          mkdir UP000000625_83333_ECOLI_v4/
          tar -xf UP000000625_83333_ECOLI_v4.tar -C UP000000625_83333_ECOLI_v4/
          rm -rf  UP000000625_83333_ECOLI_v4/*.cif
          # Decompress .gz files using 7-Zip, similar to gunzip on Linux
          Get-ChildItem -Path "UP000000625_83333_ECOLI_v4" -Filter "*.gz" | ForEach-Object {
              & "C:\Program Files\7-Zip\7z.exe" x $_.FullName -o"$(Split-Path $_.FullName -Parent)" -y | Out-Null
              Remove-Item $_.FullName # Remove the original .gz file
          }
          cargo pgo run -- UP000000625_83333_ECOLI_v4/ temp_out/ --format json
        shell: powershell

      - name: Optimize with PGO
        run: |
          cargo pgo optimize build -- --target ${{ matrix.target }}

      - name: Copy optimized binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/rust-sasa ${{ matrix.name }}

      - name: Copy optimized binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          copy target\${{ matrix.target }}\release\rust-sasa.exe ${{ matrix.name }}
        shell: cmd

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -la ./artifacts/

      - name: Prepare release files
        run: |
          mkdir -p ./release
          find ./artifacts -name "rust-sasa-*" -type f -exec cp {} ./release/ \;
          ls -la ./release/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./release/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
